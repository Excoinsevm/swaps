{"version":3,"sources":["Components/connectWalletPage.js","constants/chains.js","constants/coins.js","ethereumFunctions.js","network.js","NavBar/MenuItems.js","NavBar/NavBar.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","maxWidth","margin","marginTop","fullWidth","width","title","textAlign","marginBottom","hr","balance","overflow","buttonIcon","marginRight","footer","ConnectWalletPage","classes","_jsxs","children","_jsx","className","Container","Paper","Typography","variant","color","Grid","container","direction","justifyContent","alignItems","href","networks","ChainId","routerAddress","Map","set","COINS","chains","name","abbr","address","ROUTER","require","ERC20","FACTORY","PAIR","async","getNetwork","provider","chainId","getAccount","window","ethereum","request","method","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","signer","weth_address","coins","balanceRaw","getBalance","ethers","utils","formatEther","symbol","Contract","abi","tokenDecimals","balanceOf","fetchReserves","address1","address2","pair","coin1","coin2","coin1Decimals","coin2Decimals","reservesRaw","getReserves","results","token0","token1","err","factory","pairAddress","getPair","liquidityTokens_BN","liquidityTokens","Number","toPrecision","createTheme","palette","primary","main","contrastText","secondary","Web3Provider","props","isConnected","setConnected","useState","network","Object","create","useRef","account","chainID","router","weth","backgroundListener","setupConnection","providers","getSigner","includes","get","WETH","wethAddress","getWeth","factory_address","getFactory","e","useEffect","current","clearInterval","listener","setInterval","createListener","_Fragment","render","MenuItems","url","cName","NavBar","Component","constructor","arguments","state","clicked","map","item","index","Link","to","minHeight","backgroundColor","COLORS","borderColor","borderWidth","borderStyle","container_input","marginLeft","container_blank","grid","height","fab","zIndex","input","typography","h5","inputBase","RemoveLiquidityField1","onClick","value","onChange","activeField","xs","Fab","size","ExpandMoreIcon","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","coinName","opacity","CoinButton","coinAbbr","other","ButtonBase","focusRipple","styles","dialogContainer","titleSection","titleText","alignSelf","paddingLeft","paddingRight","coinList","overflowY","coinContainer","DialogTitle","withStyles","onClose","MuiDialogTitle","disableTypography","alignContent","IconButton","CloseIcon","DialogActions","MuiDialogActions","CoinDialog","open","others","setAddress","React","setError","exit","Dialog","undefined","paper","TextField","target","helperText","coin","Button","autoFocus","submit","doesTokenExist","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","switchButton","CoinSwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","setCoin1","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","formatReserve","reserve","data","isNaN","amountIn","routerContract","token1Decimals","token2","token2Decimals","amount_out","getAmountsOut","parseUnits","String","getAmountOut","amount","toFixed","coinTimeout","setTimeout","clearTimeout","SwapVerticalCircleIcon","fontSize","isButtonEnabled","parsedInput1","parsedInput2","swap","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","amountOut","callStatic","approve","swapExactETHForTokens","swapExactTokensForETH","swapExactTokensForTokens","swapTokens","message","autoHideDuration","LoopIcon","SwitchButton","setDeploy","changeStyles","K","document","getElementById","style","ButtonGroup","id","text","quote","amount1","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","background","values","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","NaN","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","quoteAddLiquidity","networksigner","deploy","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","addLiquidityETH","addLiquidity","AccountBalanceIcon","LiquidityRemover","tokensOut","setTokensOut","parsedInput","liquidity","feeOn","feeTo","_kLast","kLast","quoteRemoveLiquidity","remove","liquidity_tokens","Getliquidity","removeLiquidityETH","removeLiquidity","ArrowDownwardIcon","Liquidity","deploy_or_remove","App","SnackbarProvider","maxSnack","ThemeProvider","NarBar","Route","exact","path","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","BrowserRouter","StrictMode"],"mappings":"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","file":"static/js/main.56bb2334.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      <div className=\"Title\">\n        <h1 className=\"navbar-logo\">\n          Alternative Uniswap Interface\n        </h1>\n      </div>\n\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            Please connect an Ethereum wallet to your browser to use the\n            application\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","export const networks = [1, 3,4,5,42,123, 1337, 65110000, 65010000]\n\nexport const ChainId = {\n  MAINNET: 1,\n  ROPSTEN: 3,\n  RINKEBY: 4,\n  GÖRLI: 5,\n  KOVAN: 42,\n  DEVNET: 65110000,\n  AUTONITY: 65010000,\n  PARASTATE: 123,\n  GANCHE: 1337\n};\n\nexport const routerAddress = new Map();\nrouterAddress.set(ChainId.MAINNET, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.ROPSTEN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.RINKEBY, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.GÖRLI, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.KOVAN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.DEVNET, \"0x04e555283D37aE85F6eB311fe2578F3B3f3dFc52\");\nrouterAddress.set(ChainId.AUTONITY, \"0x04e555283D37aE85F6eB311fe2578F3B3f3dFc52\");\nrouterAddress.set(ChainId.PARASTATE, \"0x07a1905D44feeA439ceFAabd11a63bEf684abE11\");\nrouterAddress.set(ChainId.GANCHE, \"0x0F44AC51198D8F99847db6C431448dBC673428f1\");\n\n","import * as chains from './chains';\n\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\n\nconst AUTONITYCoins = [\n  {\n    name: \"Auton\",\n    abbr: \"AUT\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Newton\",\n    abbr: \"NEW\",\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\n  },\n  {\n    name: \"Token C\",\n    abbr: \"TC\",\n    address: \"0x03c7D835CceE5d741b3f3D144eBfC5327925ECf9\",\n  },\n  {\n    name: \"Token D\",\n    abbr: \"TD\",\n    address: \"0x90636A8bb3AD4C2168EE20CF5E6183D827Da2E91\",\n  }\n]\n\nconst DEVNETCoins = [\n  {\n    name: \"Auton\",\n    abbr: \"AUT\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Newton\",\n    abbr: \"NEW\",\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\n  }\n]\n\nconst PARASTATECoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\",\n  },\n  \n  {\n    name: \"Token C\",\n    abbr: \"TC\",\n    address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\",\n  },\n  {\n    name: \"Token D\",\n    abbr: \"TD\",\n    address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\",\n  }\n]\n\nconst GANACHECoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0xE8C4BE1Bd495c984dD83B683966B7B538d3Ea82C\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x30988e63329713c3f3FeA1ca1B94D4Abb02F78C5\",\n  },\n  \n  {\n    name: \"Token C\",\n    abbr: \"TC\",\n    address: \"0x23b4ce07ef4e2378319E40CbC0cc95EAbCf8E419\",\n  },\n  {\n    name: \"Token D\",\n    abbr: \"TD\",\n    address: \"0x49Ec3915F4daB907f7C6F74Cf5110366FCCc81A5\",\n  }\n]\n\nconst MAINNETCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n  },\n  {\n    name: \"Ampleforth\",\n    abbr: \"AMPL\",\n    address: \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\",\n  },\n  {\n    name: \"Wrapped BTC\",\n    abbr: \"WBTC\",\n    address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n  },\n  {\n    name: \"Fei USD\",\n    abbr: \"FEI\",\n    address: \"0x956F47F50A910163D8BF957Cf5846D573E7f87CA\",\n  },\n  {\n    name: \"frax\",\n    abbr: \"FRAX\",\n    address: \"0x853d955aCEf822Db058eb8505911ED77F175b99e\",\n  },\n  {\n    name: \"Frax Share\",\n    abbr: \"FXS\",\n    address: \"0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0\",\n  },\n  {\n    name: \"renBTC\",\n    abbr: \"renBTC\",\n    address: \"0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D\",\n  },\n  {\n    name: \"StakeWise\",\n    abbr: \"SWISE\",\n    address: \"0x48C3399719B582dD63eB5AADf12A40B4C3f52FA2\",\n  },\n]\n\nconst ROPSTENCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xad6d458402f60fd3bd25163575031acdce07538d\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x6ee856ae55b6e1a249f04cd3b947141bc146273c\",\n  },\n]\n\nconst KOVANCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xc4375b7de8af5a38a93548eb8453a498222c4ff2\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0xf3e0d7bf58c5d455d31ef1c2d5375904df525105\",\n  },\n]\n\nconst RINKEBYCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x95b58a6bff3d14b7db2f5cb5f0ad413dc2940658\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x3b00ef435fa4fcff5c209a37d1f3dcff37c705ad\",\n  },\n]\n\nconst GÖRLICoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x73967c6a0904aa032c103b4104747e88c566b1a2\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x509ee0d083ddf8ac028f2a56731412edd63223b9\",\n  },\n]\n\nconst COINS = new Map();\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\nCOINS.set(chains.ChainId.ROPSTEN, ROPSTENCoins);\nCOINS.set(chains.ChainId.RINKEBY, RINKEBYCoins);\nCOINS.set(chains.ChainId.GÖRLI, GÖRLICoins);\nCOINS.set(chains.ChainId.KOVAN, KOVANCoins);\nCOINS.set(chains.ChainId.AUTONITY, AUTONITYCoins);\nCOINS.set(chains.ChainId.DEVNET, DEVNETCoins);\nCOINS.set(chains.ChainId.PARASTATE, PARASTATECoins);\nCOINS.set(chains.ChainId.GANCHE, GANACHECoins)\nexport default COINS\n","import { Contract, ethers } from \"ethers\";\nimport * as chains from \"./constants/chains\";\nimport COINS from \"./constants/coins\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport async function getNetwork(provider) {\n  const network = await provider.getNetwork();\n  return network.chainId;\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport async function checkNetwork(provider) {\n  const chainId = getNetwork(provider);\n  if (chains.networks.includes(chainId)){\n    return true\n  }\n  return false;\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function getDecimals(token) {\n  const decimals = await token.decimals().then((result) => {\n      return result;\n    }).catch((error) => {\n      console.log('No tokenDecimals function for this token, set to 0');\n      return 0;\n    });\n    return decimals;\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer,\n  weth_address,\n  coins\n) {\n  try {\n    if (address === weth_address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: coins[0].abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const tokenDecimals = await getDecimals(token);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: balanceRaw*10**(-tokenDecimals),\n        symbol: symbol,\n      };\n    }\n  } catch (error) {\n    console.log ('The getBalanceAndSymbol function had an error!');\n    console.log (error)\n    return false;\n  }\n}\n\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const tokenDecimals = await getDecimals(token1);\n  \n  const amountIn = ethers.utils.parseUnits(amount, tokenDecimals);\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    tokens\n  );\n\n  await token1.approve(routerContract.address, amountIn);\n  const wethAddress = await routerContract.WETH();\n\n  if (address1 === wethAddress) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === wethAddress) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  }\n}\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract,\n  signer\n) {\n  try {\n    const token1 = new Contract(address1, ERC20.abi, signer);\n    const token1Decimals = await getDecimals(token1);\n\n    const token2 = new Contract(address2, ERC20.abi, signer);\n    const token2Decimals = await getDecimals(token2);\n\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\n      [address1, address2]\n    );\n    const amount_out = values_out[1]*10**(-token2Decimals);\n    console.log('amount out: ', amount_out)\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nexport async function fetchReserves(address1, address2, pair, signer) {\n  try {\n\n    // Get decimals for each coin\n    const coin1 = new Contract(address1, ERC20.abi, signer);\n    const coin2 = new Contract(address2, ERC20.abi, signer);\n\n    const coin1Decimals = await getDecimals(coin1);\n    const coin2Decimals = await getDecimals(coin2);\n\n    // Get reserves\n    const reservesRaw = await pair.getReserves();\n\n    // Put the results in the right order\n    const results =  [\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\n    ];\n\n    // Scale each to the right decimal place\n    return [\n      (results[0]*10**(-coin1Decimals)),\n      (results[1]*10**(-coin2Decimals))\n    ]\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  try {\n    const pairAddress = await factory.getPair(address1, address2);\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\n  \n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n  \n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n      const liquidityTokens = Number(\n        ethers.utils.formatEther(liquidityTokens_BN)\n      );\n    \n      return [\n        reservesRaw[0].toPrecision(6),\n        reservesRaw[1].toPrecision(6),\n        liquidityTokens,\n      ];\n    } else {\n      console.log(\"no reserves yet\");\n      return [0,0,0];\n    }\n  }catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0, 0];\n  }\n}\n","import { useEffect, useState, useRef } from \"react\";\nimport { Contract, ethers } from \"ethers\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport {\n  getAccount,\n  getFactory,\n  getRouter,\n  getNetwork,\n  getWeth,\n} from \"./ethereumFunctions\";\nimport COINS from \"./constants/coins\";\nimport * as chains from \"./constants/chains\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nconst autoReconnectDelay = 5000;\n\nconst Web3Provider = (props) => {\n  const [isConnected, setConnected] = useState(true);\n  let network = Object.create( {} )\n  network.provider = useRef(null);\n  network.signer = useRef(null);\n  network.account = useRef(null);\n  network.coins = [];\n  network.chainID = useRef(null);\n  network.router = useRef(null);\n  network.factory = useRef(null);\n  network.weth = useRef(null);\n  const backgroundListener = useRef(null);\n  async function setupConnection() {\n    try {\n      console.log('lets go!');\n      network.provider = new ethers.providers.Web3Provider(window.ethereum);\n      network.signer = await network.provider.getSigner();\n      await getAccount().then(async (result) => {\n        network.account = result;\n      });\n\n      await getNetwork(network.provider).then(async (chainId) => {\n        // Set chainID\n        network.chainID = chainId;\n        if (chains.networks.includes(chainId)) {\n          // Get the router using the chainID\n          network.router = await getRouter(\n            chains.routerAddress.get(chainId),\n            network.signer\n          );\n          // Get default coins for network\n          network.coins = COINS.get(chainId);\n          // Get Weth address from router\n          await network.router.WETH().then((wethAddress) => {\n            network.weth = getWeth(wethAddress, network.signer);\n            // Set the value of the weth address in the default coins array\n            network.coins[0].address = wethAddress;\n          });\n          // Get the factory address from the router\n          await network.router.factory().then((factory_address) => {\n            network.factory = getFactory(\n              factory_address,\n              network.signer\n            );\n          });\n          setConnected(true);\n        } else {\n          console.log(\"Wrong network mate.\");\n          setConnected(false);\n        }\n      });\n\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function createListener() {\n    return setInterval(async () => {\n      // console.log(\"Heartbeat\");\n      try {\n        // Check the account has not changed\n        const account = await getAccount();\n        if (account != network.account) {\n          await setupConnection();\n        }\n        // const chainID = await getNetwork(network.provider);\n        // if (chainID !== network.chainID){\n        //   setConnected(false);\n        //   await setupConnection();\n        // }\n      } catch (e) {\n        setConnected(false);\n        await setupConnection();\n      }\n    }, 1000);\n  }\n\n  useEffect(async () => {\n    // Initial setup\n    console.log(\"Initial hook\");\n    await setupConnection();\n    console.log(\"network: \", network);\n\n    // Start background listener\n    if (backgroundListener.current != null) {\n      clearInterval(backgroundListener.current);\n    }\n    const listener = createListener();\n    backgroundListener.current = listener;\n    return () => clearInterval(backgroundListener.current);\n  }, []);\n\n  const renderNotConnected = () => {\n    console.log(\"Rendering\");\n    return (\n      <div className=\"App\">\n        <div>\n          <ConnectWalletPage />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {!isConnected && renderNotConnected()}\n      {isConnected && <div> {props.render(network)}</div>}\n    </>\n  );\n};\n\nexport default Web3Provider;\n","export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/Alternative-Uniswap-Interface/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/Alternative-Uniswap-Interface/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n          <h1 className=\"navbar-logo\">\n            Alternative Uniswap Interface\n          </h1>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: COLORS.grey[200],\n    },\n  },\n  coinName: {\n    opacity: 0.6,\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, onClick, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container direction=\"column\">\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\n        <Typography variant=\"body2\" className={classes.coinName}>\n          {coinName}\n        </Typography>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: COLORS.grey[100],\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer, ...others } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>Select Coin</DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n          <TextField\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            variant=\"outlined\"\n            placeholder=\"Paste Address\"\n            error={error !== \"\"}\n            helperText={error}\n            fullWidth\n            className={classes.address}\n          />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the tokens in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={12}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} color=\"primary\">\n          Enter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport default function WrongNetwork(props) {\n\n  const classes = useStyles();\n  const {open} = props;\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <MuiDialogTitle>Unsupported Network</MuiDialogTitle>\n    </Dialog>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getNetwork,\n  getAmountOut,\n  getBalanceAndSymbol,\n  getWeth,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput1 &&\n      parsedInput1 <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(\n        (data) => setReserves(data)\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(\n        (amount) => setField2Value(amount.toFixed(7))\n      ).catch(e => {\n        console.log(e);\n        setField2Value(\"NA\");\n      })\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log('props: ', props);\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        props={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n        />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            Swap Coins\n          </Typography>\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\">Your Balances</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\">Reserves</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n        Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CoinSwapper;","import React from \"react\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nexport default function SwitchButton(props) {\n  const { setDeploy } = props;\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#ff0000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#9e9e9e\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#ff0000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div>\n      <ButtonGroup size=\"large\" variant=\"contained\">\n        <Button\n          id=\"add-button\"\n          color=\"primary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(true);\n            changeStyles(true);\n          }}\n        >\n          Deploy Liquidity\n        </Button>\n\n        <Button\n          id=\"remove-button\"\n          color=\"secondary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(false);\n            changeStyles(false);\n          }}\n        >\n          Remove Liquidity\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { Contract, ethers } from \"ethers\";\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\n\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  const wethAddress = await routerContract.WETH();\n\n  console.log([\n    address1,\n    address2,\n    amountIn1,\n    amountIn2,\n    amount1Min,\n    amount2Min,\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const Getliquidity = (liquidity_tokens)=>{\n    if (liquidity_tokens < 0.001){\n      return ethers.BigNumber.from(liquidity_tokens*10**18);\n    }\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\n  }\n\n  const liquidity = Getliquidity(liquidity_tokens);\n  console.log('liquidity: ', liquidity);\n\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const wethAddress = await routerContract.WETH();\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  return [amount2];\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nasync function quoteMintLiquidity(\n  address1,\n  address2,\n  amountA,\n  amountB,\n  factory,\n  signer\n){\n  const MINIMUM_LIQUIDITY = 1000;\n  let _reserveA = 0;\n  let _reserveB = 0;\n  let totalSupply = 0;\n  [_reserveA, _reserveB, totalSupply] = await factory.getPair(address1, address2).then(async (pairAddress) => {\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n      const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n      const reserveA = reservesRaw[0];\n      const reserveB = reservesRaw[1];\n    \n      const _totalSupply = await pair.totalSupply();\n      const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n      return [reserveA, reserveB, totalSupply]\n    } else {\n      return [0,0,0]\n    }\n  });\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  // Need to do all this decimals work to account for 0 decimal numbers\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const valueA = amountA*(10**token1Decimals);\n  const valueB = amountB*(10**token2Decimals);\n\n  const reserveA = _reserveA*(10**token1Decimals);\n  const reserveB = _reserveB*(10**token2Decimals);\n\n  if (totalSupply == 0){\n    return Math.sqrt(((valueA * valueB)-MINIMUM_LIQUIDITY))*10**(-18);\n  };\n  \n  return (\n    Math.min(valueA*totalSupply/reserveA, valueB*totalSupply/reserveB)\n  );\n};\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    const amountOut = await quoteMintLiquidity(\n      address1,\n      address2,\n      amountADesired,\n      amountBDesired,\n      factory,\n      signer);\n    return [\n      amountADesired,\n      amountBDesired,\n      amountOut.toPrecision(8),\n    ];\n  } else {\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountADesired,\n        amountBOptimal,\n        factory,\n        signer);\n      return [\n        amountADesired,\n        amountBOptimal,\n        amountOut.toPrecision(8),\n      ];\n    } else {\n      const amountAOptimal = quote(\n        amountBDesired,\n        reserveB,\n        reserveA\n      );\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountAOptimal,\n        amountBDesired,\n        factory,\n        signer);\n      return [\n        amountAOptimal,\n        amountBDesired,\n        amountOut.toPrecision(8),\n      ];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getBalanceAndSymbol,\n  getReserves,\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput1 !== NaN &&\n      0 < parsedInput1 &&\n      parsedInput2 !== NaN &&\n      0 < parsedInput2 &&\n      parsedInput1 <= coin1.balance &&\n      parsedInput2 <= coin2.balance\n    );\n  };\n\n\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      field2Value,\n      '0',\n      '0',\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n        ).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        field2Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, props.network.factory, props.network.signer]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.networksigner}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(liquidityOut[2], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getBalanceAndSymbol,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the liquidity tokens balance of the user\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput = parseFloat(field1Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput !== NaN &&\n      0 < parsedInput &&\n      parsedInput <= liquidityTokens\n    );\n  };\n\n  const remove = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      0,\n      0,\n      props.network.router,\n      props.network.account,\n      props.network.signer,\n      props.network.factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity removal.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        setTokensOut(data);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, props.network.factory, props.network.signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address, props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[1], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[2], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={remove}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity(props) {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer network={props.network}/>;\n    }\n    return <LiquidityRemover network={props.network}/>;\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            <SwitchButton setDeploy={setDeploy} />\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport Web3Provider from \"./network\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <SnackbarProvider maxSnack={3}>\n        <ThemeProvider theme={theme}>\n          <Web3Provider\n            render={(network) => (\n              <div>\n                <NarBar />\n                <Route exact path=\"/Alternative-Uniswap-Interface/\">\n                  <CoinSwapper network={network} />\n                </Route>\n\n                <Route exact path=\"/Alternative-Uniswap-Interface/liquidity\">\n                  <Liquidity network={network} />\n                </Route>\n              </div>\n            )}\n          ></Web3Provider>\n        </ThemeProvider>\n      </SnackbarProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}